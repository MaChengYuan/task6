import randomimport networkx as nximport matplotlib.pyplot as pltimport numpy as npdef to_array(adjacency_list):    edge_array = []    for i in range(len(adjacency_list)):        for j in range(1,len(adjacency_list[i])):            if(adjacency_list[i][j]!=' '):                                             edge_array.append([i,int(adjacency_list[i][j])])    print(edge_array)    return edge_arraydef number_to_index(matrix):    indexs = []    for i in range(len(matrix)):        index = []        index.append(int(matrix[i]/10))        index.append(int(matrix[i]%10))        indexs.append(index)    return indexsclass Node():    """A node class for A* Pathfinding"""    def __init__(self, parent=None, position=None):        self.parent = parent        self.position = position        self.g = 0        self.h = 0        self.f = 0    def __eq__(self, other):        return self.position == other.positiondef astar(maze, start, end):    """Returns a list of tuples as a path from the given start to the given end in the given maze"""    # Create start and end node    start_node = Node(None, start)    start_node.g = start_node.h = start_node.f = 0    end_node = Node(None, end)    end_node.g = end_node.h = end_node.f = 0    # Initialize both open and closed list    open_list = []    closed_list = []    # Add the start node    open_list.append(start_node)    # Loop until you find the end    while len(open_list) > 0:        # Get the current node        current_node = open_list[0]        current_index = 0        for index, item in enumerate(open_list):            if item.f < current_node.f:                current_node = item                current_index = index        # Pop current off open list, add to closed list        open_list.pop(current_index)        closed_list.append(current_node)        # Found the goal        if current_node == end_node:            path = []            current = current_node            while current is not None:                path.append(current.position)                current = current.parent            return path[::-1] # Return reversed path        # Generate children        children = []        for new_position in [(0, -1), (0, 1), (-1, 0), (1, 0), (-1, -1), (-1, 1), (1, -1), (1, 1)]: # Adjacent squares            # Get node position            node_position = (current_node.position[0] + new_position[0], current_node.position[1] + new_position[1])            # Make sure within range            if node_position[0] > (len(maze) - 1) or node_position[0] < 0 or node_position[1] > (len(maze[len(maze)-1]) -1) or node_position[1] < 0:                continue            # Make sure walkable terrain            if maze[node_position[0]][node_position[1]] != 0:                continue            # Create new node            new_node = Node(current_node, node_position)            # Append            children.append(new_node)        # Loop through children        for child in children:            # Child is on the closed list            for closed_child in closed_list:                if child == closed_child:                    continue            # Create the f, g, and h values            child.g = current_node.g + 1            child.h = ((child.position[0] - end_node.position[0]) ** 2) + ((child.position[1] - end_node.position[1]) ** 2)            child.f = child.g + child.h            # Child is already in the open list            for open_node in open_list:                if child == open_node and child.g > open_node.g:                    continue            # Add the child to the open list            open_list.append(child)def convert_best_route_to_two(grid2,path):    new_grid = grid2.copy()    for i in range(len(path)):        index = list(path[i])        new_grid[index[0]][index[1]] = 7        return new_grid    def main():    row = 10    column = 20    obstacle_number = 40           grid2 = [0]*row*column    grid2 = np.array(grid2).reshape(row,column)    row = np.arange(0,row,1)    row_edge = row.tolist()    column = np.arange(0,column,1)    column_edge = column.tolist()    indexs = []    for i in range(len(row_edge)):        for j in range(len(column_edge)):            index = []            index.append(i)            index.append(j)            indexs.append(index)    obstacle_grids = random.sample(indexs,obstacle_number)            for i in range(len(obstacle_grids)):        grid2[obstacle_grids[i][0]][obstacle_grids[i][1]]=1                for i in range(10):        print('------------------------------------------')        print('{}th iteration'.format(i+1))                  print(grid2)           print()        random_start_end = random.sample(indexs,2)            start = random_start_end[0]        end = random_start_end[1]            print('start from : {}'.format(start))        print('to : {}'.format(end))        path  = astar(grid2, tuple(start), tuple(end))        print()        print('best route is {}'.format(path))        print()        new_grid = convert_best_route_to_two(grid2,path)        print(new_grid)        print()    if __name__ == '__main__':    main()